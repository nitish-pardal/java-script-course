Advance features of the function:
functions are also values .
Any thing that you can do with a value you can do it with a function.
we can save a function in a variable.
In JavaScript as long as there is a way to access the function we do not need to give function a name, this is known as an Anonymous function.

Anonymous function:
  This is a function without a name and defined as:
    const function1 = function()
    {
      console.log('hello2');
    } ;

HOISTING: 
when we write a function normally , then we do not need to worry about where we need to call the function , we can call it before even defining it , this is HOISTING.  

HOISTING does not work in case of anonymous function.

you can also define a funtion within an object by using a proerty called as 'fun: function functionName()', This is called as method
you can call the above function by calling the property as: obj1.fun();

you can also pass a function into a function.

CALL-BACK FUNCTION():
when you pass a function in side a function the function that is passed is called as a callback function.

Example: 

function run(parameter){ 
  parameter(); //calling the parameter as function because the value that is passed in the parameter is a function.
}
run (function(){
  console.log('function within a function'); // the callback function.
});

SETTIMEOUT():
  this function helps us to run a function in the future.

  function takes up 2 values .
  one: the name of the function that we want to run in the future.
  two: how long to wait before running this function.

Asynchronous code:
Asynchronous code means that the code wont wait for the code line to get executed and it just moves on to the next line of the code , 
EXAMPLE:

f1= function(){
  console.log('time out function text'); 
}
 setTimeout(f1, 6000); // the code will not wait for this line to get exected instead set the timer for 6second and move on to print the next line of the code.

console.log('next line');

Synchronous code:
This means the code will wait for one line to finish before going to the next line of the code.
.all the code that we have written in this course in Synchronous code.

SetInterval():Takes up 2 parameters:
one: name of the function / function that we need to run in future.
two: how long to wait before running the function.

This runs the conde in the inverval of every seconds that you have passed in the second parameter.
EXAMPLE:
setInterval(function f2(){ // runs this function with the interval of one second.
  console.log('Interval');
}, 1000);

the setInterval function always returns a value , you can call it as interval id and when you want to stop the interval use clearInterval(intervalId);
to stop the function.

with every interval a new Id is produced. you can save the id in a variable.

clearInterval(intervalId): This is a function that is used to stop the inteval , the parameter is the intervalId that comes from the setInterval().


forEach():
  This allows us to loop through the array same as for and while loops.
  wokrs with the function as a parameter as:
  array1=[
  'make dinner',
  'wash dishes',
  'watch youtube'
];
array1.forEach(function(value , index){
  console.log(value);
  console.log(index);
});
explanation: loop through the array and insert the value of the array in the first parameter and the index in the second parameter.

The foreach() function does not have a break statement and if you require to use the break any where in you code then you should use the for loop instead of the forEach();

you can get the functionaliy of the continue by using the return statement.

EXAMPLE:
array1=[
  'make dinner',
  'wash dishes',
  'watch youtube'
];
array1.forEach(function(value , index){
  if(value === 'wash dishes')
    return;
  
  console.log(value);
  console.log(index);
});

ARROW FUNCTONS():
This is just a shorter way of writing functions
This has the same functionality as the normal functions, but the only difference is that it has some features over the normal function.

normal arrow function:

const arrowfunction =()=>{
  console.log('this is a normal arrow function');
}

one parameter arrow function:
does not require any brackets around the parameter.
const oneparamete =param =>{
  return param;
}

oneline arrow function:
does not require any return statement of any curly braces
const oneLine =()=> 2+3 ;

Arrow functions vs normal functions:
arrow functions do not provide use with the hoisting feature like the normal function.

.addEventListner('event name (click,keydown etc.)',function for what to do when the even is met.): better way of using java script on a html element.

advantages of the .addEventListner():
this helps us add multiple event listeners to one event .

removeEventListner(): This helps in remving the event listener takes upt two parameters:
one:is the string for the event.
two:is the exactfunction that we want to remove.

Two more array methods: filter and map: 
.filter(): the filter function creates a new array and store the value just like for each function , but the value that is stored in the array depends upon the conditin provided in the function.

EXAMPLE:

array1=[1,-3,5];
console.log(array1.filter((value ,index) =>{
  return value >= 0;
}));

.map(): transforms an array to another array and return whatever we are doing in the function.

EXAMPLE:

const map = [1,1,3].map((value,index) => {
  return value * 2;
});

above code can be wriiten as:
const map =[1,1,3].map(value => value*2); // this is a short cut for writing a arrow function.

closure: This says:
If a function has access to a value,
then it always have access to that value.




